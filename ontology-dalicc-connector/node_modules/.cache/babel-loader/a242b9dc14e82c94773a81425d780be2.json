{"ast":null,"code":"//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar util = require('util');\nvar precond = require('precond');\nvar BackoffStrategy = require('./strategy');\n\n// Exponential backoff strategy.\nfunction ExponentialBackoffStrategy(options) {\n  BackoffStrategy.call(this, options);\n  this.backoffDelay_ = 0;\n  this.nextBackoffDelay_ = this.getInitialDelay();\n  this.factor_ = ExponentialBackoffStrategy.DEFAULT_FACTOR;\n  if (options && options.factor !== undefined) {\n    precond.checkArgument(options.factor > 1, 'Exponential factor should be greater than 1 but got %s.', options.factor);\n    this.factor_ = options.factor;\n  }\n}\nutil.inherits(ExponentialBackoffStrategy, BackoffStrategy);\n\n// Default multiplication factor used to compute the next backoff delay from\n// the current one. The value can be overridden by passing a custom factor as\n// part of the options.\nExponentialBackoffStrategy.DEFAULT_FACTOR = 2;\nExponentialBackoffStrategy.prototype.next_ = function () {\n  this.backoffDelay_ = Math.min(this.nextBackoffDelay_, this.getMaxDelay());\n  this.nextBackoffDelay_ = this.backoffDelay_ * this.factor_;\n  return this.backoffDelay_;\n};\nExponentialBackoffStrategy.prototype.reset_ = function () {\n  this.backoffDelay_ = 0;\n  this.nextBackoffDelay_ = this.getInitialDelay();\n};\nmodule.exports = ExponentialBackoffStrategy;","map":null,"metadata":{},"sourceType":"script"}