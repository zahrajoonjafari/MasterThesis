{"ast":null,"code":"var _objectSpread = require(\"/home/sima/Desktop/finalMaster/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar errorValues = require('./errorValues.json');\nvar FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal;\nvar _require = require('./classes'),\n  EthereumRpcError = _require.EthereumRpcError;\nvar JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\nvar FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nvar FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param {number} code - The integer error code\n * @param {string} fallbackMessage - The fallback message\n * @return {string} The corresponding message or the fallback message\n */\nfunction getMessageFromCode(code) {\n  var fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n  if (Number.isInteger(code)) {\n    var codeString = code.toString();\n    if (errorValues[codeString]) {\n      return errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n *\n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode(code) {\n  if (!Number.isInteger(code)) {\n    return false;\n  }\n  var codeString = code.toString();\n  if (errorValues[codeString]) {\n    return true;\n  }\n  if (isJsonRpcServerError(code)) {\n    return true;\n  }\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false;\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n *\n * @param {any} error - The error to serialize.\n * @param {Object} [options] - An options object.\n * @param {Object} [options.fallbackError] - The custom fallback error values if\n * the given error is invalid.\n * @param {boolean} [options.shouldIncludeStack] - Whether the 'stack' property\n * of the given error should be included on the serialized error, if present.\n * @return {Object} A standardized, plain error object.\n */\nfunction serializeError(error) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$fallbackError = _ref.fallbackError,\n    fallbackError = _ref$fallbackError === void 0 ? FALLBACK_ERROR : _ref$fallbackError,\n    _ref$shouldIncludeSta = _ref.shouldIncludeStack,\n    shouldIncludeStack = _ref$shouldIncludeSta === void 0 ? false : _ref$shouldIncludeSta;\n  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n    throw new Error('Must provide fallback error with integer number code and string message.');\n  }\n  if (error instanceof EthereumRpcError) {\n    return error.serialize();\n  }\n  var serialized = {};\n  if (error && isValidCode(error.code)) {\n    serialized.code = error.code;\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message;\n      if ('data' in error) {\n        serialized.data = error.data;\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code);\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n  } else {\n    serialized.code = fallbackError.code;\n    serialized.message = error && error.message ? error.message : fallbackError.message;\n    serialized.data = {\n      originalError: assignOriginalError(error)\n    };\n  }\n  if (shouldIncludeStack && error && typeof error.stack === 'string') {\n    serialized.stack = error.stack;\n  }\n  return serialized;\n}\n\n// Internal\n\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\nfunction assignOriginalError(error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return _objectSpread({}, error);\n  }\n  return error;\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode: getMessageFromCode,\n  isValidCode: isValidCode,\n  serializeError: serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE: JSON_RPC_SERVER_ERROR_MESSAGE\n};","map":null,"metadata":{},"sourceType":"script"}