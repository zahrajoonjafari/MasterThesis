{"ast":null,"code":"var xhr = process.browser ? require('xhr') : require('request');\nvar inherits = require('util').inherits;\nvar createPayload = require('../util/create-payload.js');\nvar Subprovider = require('./subprovider.js');\nvar _require = require('eth-json-rpc-errors'),\n  ethErrors = _require.ethErrors,\n  serializeError = _require.serializeError;\nmodule.exports = RpcSource;\ninherits(RpcSource, Subprovider);\nfunction RpcSource(opts) {\n  var self = this;\n  self.rpcUrl = opts.rpcUrl;\n}\nRpcSource.prototype.handleRequest = function (payload, next, end) {\n  var self = this;\n  var targetUrl = self.rpcUrl;\n\n  // overwrite id to conflict with other concurrent users\n  var sanitizedPayload = sanitizePayload(payload);\n  var newPayload = createPayload(sanitizedPayload);\n  xhr({\n    uri: targetUrl,\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPayload),\n    rejectUnauthorized: false,\n    timeout: 20000\n  }, function (err, res, body) {\n    if (err) return end(serializeError(err));\n\n    // check for error code\n    switch (res.statusCode) {\n      case 405:\n        return end(ethErrors.rpc.methodNotFound());\n      case 504:\n        // Gateway timeout\n        return function () {\n          var msg = \"Gateway timeout. The request took too long to process. \";\n          msg += \"This can happen when querying logs over too wide a block range.\";\n          var err = new Error(msg);\n          return end(serializeError(err));\n        }();\n      case 429:\n        // Too many requests (rate limiting)\n        return function () {\n          var err = new Error(\"Too Many Requests\");\n          return end(serializeError(err));\n        }();\n      default:\n        if (res.statusCode != 200) {\n          var msg = 'Unknown Error: ' + res.body;\n          var _err = new Error(msg);\n          return end(serializeError(_err));\n        }\n    }\n\n    // parse response\n    var data;\n    try {\n      data = JSON.parse(body);\n    } catch (err) {\n      console.error(err.stack);\n      return end(serializeError(err));\n    }\n    if (data.error) return end(data.error);\n    end(null, data.result);\n  });\n};\n\n// drops any non-standard params\nfunction sanitizePayload(payload) {\n  return {\n    id: payload.id,\n    jsonrpc: payload.jsonrpc,\n    method: payload.method,\n    params: payload.params\n  };\n}","map":null,"metadata":{},"sourceType":"script"}