{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/sima/Desktop/finalMaster/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"/home/sima/Desktop/finalMaster/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar ethereumjs_abi_1 = require(\"ethereumjs-abi\");\nvar utils_1 = require(\"./utils\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nvar SignTypedDataVersion;\n(function (SignTypedDataVersion) {\n  SignTypedDataVersion[\"V1\"] = \"V1\";\n  SignTypedDataVersion[\"V3\"] = \"V3\";\n  SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\nexports.TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(version, allowedVersions) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(\"Invalid version: '\".concat(version, \"'\"));\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\"SignTypedDataVersion not allowed: '\".concat(version, \"'. Allowed versions are: \").concat(allowedVersions.join(', ')));\n  }\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(types, name, type, value, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  if (types[type] !== undefined) {\n    return ['bytes32', version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n    ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethereumjs_util_1.keccak(encodeData(type, value, types, version))];\n  }\n  if (value === undefined) {\n    throw new Error(\"missing value for field \".concat(name, \" of type \").concat(type));\n  }\n  if (type === 'bytes') {\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n    }\n    var parsedType = type.slice(0, type.lastIndexOf('['));\n    var typeValuePairs = value.map(function (item) {\n      return encodeField(types, name, parsedType, item, version);\n    });\n    return ['bytes32', ethereumjs_util_1.keccak(ethereumjs_abi_1.rawEncode(typeValuePairs.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n        t = _ref2[0];\n      return t;\n    }), typeValuePairs.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        v = _ref4[1];\n      return v;\n    })))];\n  }\n  return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  var encodedTypes = ['bytes32'];\n  var encodedValues = [hashType(primaryType, types)];\n  var _iterator = _createForOfIteratorHelper(types[primaryType]),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var field = _step.value;\n      if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n        continue;\n      }\n      var _encodeField = encodeField(types, field.name, field.type, data[field.name], version),\n        _encodeField2 = _slicedToArray(_encodeField, 2),\n        type = _encodeField2[0],\n        value = _encodeField2[1];\n      encodedTypes.push(type);\n      encodedValues.push(value);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return ethereumjs_abi_1.rawEncode(encodedTypes, encodedValues);\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(primaryType, types) {\n  var result = '';\n  var unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n  var deps = [primaryType].concat(_toConsumableArray(Array.from(unsortedDeps).sort()));\n  var _iterator2 = _createForOfIteratorHelper(deps),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var type = _step2.value;\n      var children = types[type];\n      if (!children) {\n        throw new Error(\"No type definition specified: \".concat(type));\n      }\n      result += \"\".concat(type, \"(\").concat(types[type].map(function (_ref5) {\n        var name = _ref5.name,\n          t = _ref5.type;\n        return \"\".concat(t, \" \").concat(name);\n      }).join(','), \")\");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(primaryType, types) {\n  var results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n  var _primaryType$match = primaryType.match(/^[0-9A-Z_a-z]*/);\n  var _primaryType$match2 = _slicedToArray(_primaryType$match, 1);\n  primaryType = _primaryType$match2[0];\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n  results.add(primaryType);\n  var _iterator3 = _createForOfIteratorHelper(types[primaryType]),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var field = _step3.value;\n      findTypeDependencies(field.type, types, results);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  return ethereumjs_util_1.keccak(encodeData(primaryType, data, types, version));\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(primaryType, types) {\n  return ethereumjs_util_1.keccak(encodeType(primaryType, types));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData(data) {\n  var sanitizedData = {};\n  for (var key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n  if ('types' in sanitizedData) {\n    sanitizedData.types = Object.assign({\n      EIP712Domain: []\n    }, sanitizedData.types);\n  }\n  return sanitizedData;\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash(typedData, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  var sanitizedData = sanitizeData(typedData);\n  var parts = [Buffer.from('1901', 'hex')];\n  parts.push(hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, version));\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct(\n    // TODO: Validate that this is a string, so this type cast can be removed.\n    sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n  }\n  return ethereumjs_util_1.keccak(Buffer.concat(parts));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\nexports.TypedDataUtils = {\n  encodeData: encodeData,\n  encodeType: encodeType,\n  findTypeDependencies: findTypeDependencies,\n  hashStruct: hashStruct,\n  hashType: hashType,\n  sanitizeData: sanitizeData,\n  eip712Hash: eip712Hash\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nfunction typedSignatureHash(typedData) {\n  var hashBuffer = _typedSignatureHash(typedData);\n  return ethereumjs_util_1.bufferToHex(hashBuffer);\n}\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData) {\n  var error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n  var data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n    return utils_1.legacyToBuffer(e.value);\n  });\n  var types = typedData.map(function (e) {\n    return e.type;\n  });\n  var schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return \"\".concat(e.type, \" \").concat(e.name);\n  });\n  return ethereumjs_abi_1.soliditySHA3(['bytes32', 'bytes32'], [ethereumjs_abi_1.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethereumjs_abi_1.soliditySHA3(types, data)]);\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction signTypedData(_ref6) {\n  var privateKey = _ref6.privateKey,\n    data = _ref6.data,\n    version = _ref6.version;\n  validateVersion(version);\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n  var messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  var sig = ethereumjs_util_1.ecsign(messageHash, privateKey);\n  return utils_1.concatSig(ethereumjs_util_1.toBuffer(sig.v), sig.r, sig.s);\n}\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nfunction recoverTypedSignature(_ref7) {\n  var data = _ref7.data,\n    signature = _ref7.signature,\n    version = _ref7.version;\n  validateVersion(version);\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n  var messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  var publicKey = utils_1.recoverPublicKey(messageHash, signature);\n  var sender = ethereumjs_util_1.publicToAddress(publicKey);\n  return ethereumjs_util_1.bufferToHex(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;","map":null,"metadata":{},"sourceType":"script"}