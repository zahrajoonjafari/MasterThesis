{"ast":null,"code":"//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar events = require('events');\nvar precond = require('precond');\nvar util = require('util');\n\n// A class to hold the state of a backoff operation. Accepts a backoff strategy\n// to generate the backoff delays.\nfunction Backoff(backoffStrategy) {\n  events.EventEmitter.call(this);\n  this.backoffStrategy_ = backoffStrategy;\n  this.maxNumberOfRetry_ = -1;\n  this.backoffNumber_ = 0;\n  this.backoffDelay_ = 0;\n  this.timeoutID_ = -1;\n  this.handlers = {\n    backoff: this.onBackoff_.bind(this)\n  };\n}\nutil.inherits(Backoff, events.EventEmitter);\n\n// Sets a limit, greater than 0, on the maximum number of backoffs. A 'fail'\n// event will be emitted when the limit is reached.\nBackoff.prototype.failAfter = function (maxNumberOfRetry) {\n  precond.checkArgument(maxNumberOfRetry > 0, 'Expected a maximum number of retry greater than 0 but got %s.', maxNumberOfRetry);\n  this.maxNumberOfRetry_ = maxNumberOfRetry;\n};\n\n// Starts a backoff operation. Accepts an optional parameter to let the\n// listeners know why the backoff operation was started.\nBackoff.prototype.backoff = function (err) {\n  precond.checkState(this.timeoutID_ === -1, 'Backoff in progress.');\n  if (this.backoffNumber_ === this.maxNumberOfRetry_) {\n    this.emit('fail', err);\n    this.reset();\n  } else {\n    this.backoffDelay_ = this.backoffStrategy_.next();\n    this.timeoutID_ = setTimeout(this.handlers.backoff, this.backoffDelay_);\n    this.emit('backoff', this.backoffNumber_, this.backoffDelay_, err);\n  }\n};\n\n// Handles the backoff timeout completion.\nBackoff.prototype.onBackoff_ = function () {\n  this.timeoutID_ = -1;\n  this.emit('ready', this.backoffNumber_, this.backoffDelay_);\n  this.backoffNumber_++;\n};\n\n// Stops any backoff operation and resets the backoff delay to its inital value.\nBackoff.prototype.reset = function () {\n  this.backoffNumber_ = 0;\n  this.backoffStrategy_.reset();\n  clearTimeout(this.timeoutID_);\n  this.timeoutID_ = -1;\n};\nmodule.exports = Backoff;","map":null,"metadata":{},"sourceType":"script"}