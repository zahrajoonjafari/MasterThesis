{"ast":null,"code":"var _slicedToArray = require(\"/home/sima/Desktop/finalMaster (copy)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _require = require('./classes'),\n  EthereumRpcError = _require.EthereumRpcError,\n  EthereumProviderError = _require.EthereumProviderError;\nvar _require2 = require('./utils'),\n  getMessageFromCode = _require2.getMessageFromCode;\nvar ERROR_CODES = require('./errorCodes.json');\nmodule.exports = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    parse: function parse(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.parse, opts);\n    },\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidRequest: function invalidRequest(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.invalidRequest, opts);\n    },\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidParams: function invalidParams(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.invalidParams, opts);\n    },\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotFound: function methodNotFound(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.methodNotFound, opts);\n    },\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    internal: function internal(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.internal, opts);\n    },\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP 1474.\n     * \n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    server: function server(opts) {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n      var code = opts.code;\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n      return getEthJsonRpcError(code, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidInput: function invalidInput(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.invalidInput, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceNotFound: function resourceNotFound(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.resourceNotFound, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceUnavailable: function resourceUnavailable(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.resourceUnavailable, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    transactionRejected: function transactionRejected(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.transactionRejected, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotSupported: function methodNotSupported(opts) {\n      return getEthJsonRpcError(ERROR_CODES.rpc.methodNotSupported, opts);\n    }\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    userRejectedRequest: function userRejectedRequest(opts) {\n      return getEthProviderError(ERROR_CODES.provider.userRejectedRequest, opts);\n    },\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unauthorized: function unauthorized(opts) {\n      return getEthProviderError(ERROR_CODES.provider.unauthorized, opts);\n    },\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unsupportedMethod: function unsupportedMethod(opts) {\n      return getEthProviderError(ERROR_CODES.provider.unsupportedMethod, opts);\n    },\n    /**\n     * Get a custom Ethereum Provider error.\n     * \n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} opts.message - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    custom: function custom(opts) {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n      var code = opts.code,\n        message = opts.message,\n        data = opts.data;\n      if (!message || typeof message !== 'string') throw new Error('\"message\" must be a nonempty string');\n      return new EthereumProviderError(code, message, data);\n    }\n  }\n};\n\n// Internal\n\nfunction getEthJsonRpcError(code, opts) {\n  var _validateOpts = validateOpts(opts),\n    _validateOpts2 = _slicedToArray(_validateOpts, 2),\n    message = _validateOpts2[0],\n    data = _validateOpts2[1];\n  return new EthereumRpcError(code, message || getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, opts) {\n  var _validateOpts3 = validateOpts(opts),\n    _validateOpts4 = _slicedToArray(_validateOpts3, 2),\n    message = _validateOpts4[0],\n    data = _validateOpts4[1];\n  return new EthereumProviderError(code, message || getMessageFromCode(code), data);\n}\nfunction validateOpts(opts) {\n  var message, data;\n  if (opts) {\n    if (typeof opts === 'string') {\n      message = opts;\n    } else if (typeof opts === 'object' && !Array.isArray(opts)) {\n      message = opts.message;\n      data = opts.data;\n    }\n  }\n  return [message, data];\n}","map":null,"metadata":{},"sourceType":"script"}