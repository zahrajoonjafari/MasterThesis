{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/sima/Desktop/finalMaster (copy)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar processFn = function processFn(fn, options, proxy, unwrapped) {\n  return function () {\n    var _this = this;\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n    var P = options.promiseModule;\n    return new P(function (resolve, reject) {\n      if (options.multiArgs) {\n        arguments_.push(function () {\n          for (var _len2 = arguments.length, result = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            result[_key2] = arguments[_key2];\n          }\n          if (options.errorFirst) {\n            if (result[0]) {\n              reject(result);\n            } else {\n              result.shift();\n              resolve(result);\n            }\n          } else {\n            resolve(result);\n          }\n        });\n      } else if (options.errorFirst) {\n        arguments_.push(function (error, result) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        });\n      } else {\n        arguments_.push(resolve);\n      }\n      var self = _this === proxy ? unwrapped : _this;\n      Reflect.apply(fn, self, arguments_);\n    });\n  };\n};\nvar filterCache = new WeakMap();\nmodule.exports = function (input, options) {\n  options = _objectSpread({\n    exclude: [/.+(?:Sync|Stream)$/],\n    errorFirst: true,\n    promiseModule: Promise\n  }, options);\n  var objectType = typeof input;\n  if (!(input !== null && (objectType === 'object' || objectType === 'function'))) {\n    throw new TypeError(\"Expected `input` to be a `Function` or `Object`, got `\".concat(input === null ? 'null' : objectType, \"`\"));\n  }\n  var filter = function filter(target, key) {\n    var cached = filterCache.get(target);\n    if (!cached) {\n      cached = {};\n      filterCache.set(target, cached);\n    }\n    if (key in cached) {\n      return cached[key];\n    }\n    var match = function match(pattern) {\n      return typeof pattern === 'string' || typeof key === 'symbol' ? key === pattern : pattern.test(key);\n    };\n    var desc = Reflect.getOwnPropertyDescriptor(target, key);\n    var writableOrConfigurableOwn = desc === undefined || desc.writable || desc.configurable;\n    var included = options.include ? options.include.some(match) : !options.exclude.some(match);\n    var shouldFilter = included && writableOrConfigurableOwn;\n    cached[key] = shouldFilter;\n    return shouldFilter;\n  };\n  var cache = new WeakMap();\n  var proxy = new Proxy(input, {\n    apply: function apply(target, thisArg, args) {\n      var cached = cache.get(target);\n      if (cached) {\n        return Reflect.apply(cached, thisArg, args);\n      }\n      var pified = options.excludeMain ? target : processFn(target, options, proxy, target);\n      cache.set(target, pified);\n      return Reflect.apply(pified, thisArg, args);\n    },\n    get: function get(target, key) {\n      var property = target[key];\n\n      // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n      if (!filter(target, key) || property === Function.prototype[key]) {\n        return property;\n      }\n      var cached = cache.get(property);\n      if (cached) {\n        return cached;\n      }\n      if (typeof property === 'function') {\n        var pified = processFn(property, options, proxy, target);\n        cache.set(property, pified);\n        return pified;\n      }\n      return property;\n    }\n  });\n  return proxy;\n};","map":null,"metadata":{},"sourceType":"script"}