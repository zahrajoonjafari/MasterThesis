{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar utils_1 = require(\"./utils\");\n/**\n * Create an Ethereum-specific signature for a message.\n *\n * This function is equivalent to the `eth_sign` Ethereum JSON-RPC method as specified in EIP-1417,\n * as well as the MetaMask's `personal_sign` method.\n *\n * @param options - The personal sign options.\n * @param options.privateKey - The key to sign with.\n * @param options.data - The hex data to sign.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction personalSign(_ref) {\n  var privateKey = _ref.privateKey,\n    data = _ref.data;\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(privateKey)) {\n    throw new Error('Missing privateKey parameter');\n  }\n  var message = utils_1.legacyToBuffer(data);\n  var msgHash = ethereumjs_util_1.hashPersonalMessage(message);\n  var sig = ethereumjs_util_1.ecsign(msgHash, privateKey);\n  var serialized = utils_1.concatSig(ethereumjs_util_1.toBuffer(sig.v), sig.r, sig.s);\n  return serialized;\n}\nexports.personalSign = personalSign;\n/**\n * Recover the address of the account used to create the given Ethereum signature. The message\n * must have been signed using the `personalSign` function, or an equivalent function.\n *\n * @param options - The signature recovery options.\n * @param options.data - The hex data that was signed.\n * @param options.signature - The '0x'-prefixed hex encoded message signature.\n * @returns The '0x'-prefixed hex encoded address of the message signer.\n */\nfunction recoverPersonalSignature(_ref2) {\n  var data = _ref2.data,\n    signature = _ref2.signature;\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n  var publicKey = getPublicKeyFor(data, signature);\n  var sender = ethereumjs_util_1.publicToAddress(publicKey);\n  var senderHex = ethereumjs_util_1.bufferToHex(sender);\n  return senderHex;\n}\nexports.recoverPersonalSignature = recoverPersonalSignature;\n/**\n * Recover the public key of the account used to create the given Ethereum signature. The message\n * must have been signed using the `personalSign` function, or an equivalent function.\n *\n * @param options - The public key recovery options.\n * @param options.data - The hex data that was signed.\n * @param options.signature - The '0x'-prefixed hex encoded message signature.\n * @returns The '0x'-prefixed hex encoded public key of the message signer.\n */\nfunction extractPublicKey(_ref3) {\n  var data = _ref3.data,\n    signature = _ref3.signature;\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n  var publicKey = getPublicKeyFor(data, signature);\n  return \"0x\".concat(publicKey.toString('hex'));\n}\nexports.extractPublicKey = extractPublicKey;\n/**\n * Get the public key for the given signature and message.\n *\n * @param message - The message that was signed.\n * @param signature - The '0x'-prefixed hex encoded message signature.\n * @returns The public key of the signer.\n */\nfunction getPublicKeyFor(message, signature) {\n  var messageHash = ethereumjs_util_1.hashPersonalMessage(utils_1.legacyToBuffer(message));\n  return utils_1.recoverPublicKey(messageHash, signature);\n}","map":null,"metadata":{},"sourceType":"script"}