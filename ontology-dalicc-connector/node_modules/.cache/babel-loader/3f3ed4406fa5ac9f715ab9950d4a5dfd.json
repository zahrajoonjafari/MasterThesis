{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = exports.recoverPublicKey = exports.concatSig = exports.legacyToBuffer = exports.isNullish = exports.padWithZeroes = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nfunction padWithZeroes(hexString, targetLength) {\n  if (hexString !== '' && !/^[0-9a-f]+$/i.test(hexString)) {\n    throw new Error(\"Expected an unprefixed hex string. Received: \".concat(hexString));\n  }\n  if (targetLength < 0) {\n    throw new Error(\"Expected a non-negative integer target length. Received: \".concat(targetLength));\n  }\n  return String.prototype.padStart.call(hexString, targetLength, '0');\n}\nexports.padWithZeroes = padWithZeroes;\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nfunction isNullish(value) {\n  return value === null || value === undefined;\n}\nexports.isNullish = isNullish;\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nfunction legacyToBuffer(value) {\n  return typeof value === 'string' && !ethjs_util_1.isHexString(value) ? Buffer.from(value) : ethereumjs_util_1.toBuffer(value);\n}\nexports.legacyToBuffer = legacyToBuffer;\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nfunction concatSig(v, r, s) {\n  var rSig = ethereumjs_util_1.fromSigned(r);\n  var sSig = ethereumjs_util_1.fromSigned(s);\n  var vSig = ethereumjs_util_1.bufferToInt(v);\n  var rStr = padWithZeroes(ethereumjs_util_1.toUnsigned(rSig).toString('hex'), 64);\n  var sStr = padWithZeroes(ethereumjs_util_1.toUnsigned(sSig).toString('hex'), 64);\n  var vStr = ethjs_util_1.stripHexPrefix(ethjs_util_1.intToHex(vSig));\n  return ethereumjs_util_1.addHexPrefix(rStr.concat(sStr, vStr));\n}\nexports.concatSig = concatSig;\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nfunction recoverPublicKey(messageHash, signature) {\n  var sigParams = ethereumjs_util_1.fromRpcSig(signature);\n  return ethereumjs_util_1.ecrecover(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\nexports.recoverPublicKey = recoverPublicKey;\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nfunction normalize(input) {\n  if (!input) {\n    return undefined;\n  }\n  if (typeof input === 'number') {\n    var buffer = ethereumjs_util_1.toBuffer(input);\n    input = ethereumjs_util_1.bufferToHex(buffer);\n  }\n  if (typeof input !== 'string') {\n    var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += \" received \".concat(typeof input, \": \").concat(input);\n    throw new Error(msg);\n  }\n  return ethereumjs_util_1.addHexPrefix(input.toLowerCase());\n}\nexports.normalize = normalize;","map":null,"metadata":{},"sourceType":"script"}