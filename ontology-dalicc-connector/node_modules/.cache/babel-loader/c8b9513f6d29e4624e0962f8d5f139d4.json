{"ast":null,"code":"//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar events = require('events');\nvar util = require('util');\nfunction isDef(value) {\n  return value !== undefined && value !== null;\n}\n\n// Abstract class defining the skeleton for the backoff strategies. Accepts an\n// object holding the options for the backoff strategy:\n//\n//  * `randomisationFactor`: The randomisation factor which must be between 0\n//     and 1 where 1 equates to a randomization factor of 100% and 0 to no\n//     randomization.\n//  * `initialDelay`: The backoff initial delay in milliseconds.\n//  * `maxDelay`: The backoff maximal delay in milliseconds.\nfunction BackoffStrategy(options) {\n  options = options || {};\n  if (isDef(options.initialDelay) && options.initialDelay < 1) {\n    throw new Error('The initial timeout must be greater than 0.');\n  } else if (isDef(options.maxDelay) && options.maxDelay < 1) {\n    throw new Error('The maximal timeout must be greater than 0.');\n  }\n  this.initialDelay_ = options.initialDelay || 100;\n  this.maxDelay_ = options.maxDelay || 10000;\n  if (this.maxDelay_ <= this.initialDelay_) {\n    throw new Error('The maximal backoff delay must be ' + 'greater than the initial backoff delay.');\n  }\n  if (isDef(options.randomisationFactor) && (options.randomisationFactor < 0 || options.randomisationFactor > 1)) {\n    throw new Error('The randomisation factor must be between 0 and 1.');\n  }\n  this.randomisationFactor_ = options.randomisationFactor || 0;\n}\n\n// Gets the maximal backoff delay.\nBackoffStrategy.prototype.getMaxDelay = function () {\n  return this.maxDelay_;\n};\n\n// Gets the initial backoff delay.\nBackoffStrategy.prototype.getInitialDelay = function () {\n  return this.initialDelay_;\n};\n\n// Template method that computes and returns the next backoff delay in\n// milliseconds.\nBackoffStrategy.prototype.next = function () {\n  var backoffDelay = this.next_();\n  var randomisationMultiple = 1 + Math.random() * this.randomisationFactor_;\n  var randomizedDelay = Math.round(backoffDelay * randomisationMultiple);\n  return randomizedDelay;\n};\n\n// Computes and returns the next backoff delay. Intended to be overridden by\n// subclasses.\nBackoffStrategy.prototype.next_ = function () {\n  throw new Error('BackoffStrategy.next_() unimplemented.');\n};\n\n// Template method that resets the backoff delay to its initial value.\nBackoffStrategy.prototype.reset = function () {\n  this.reset_();\n};\n\n// Resets the backoff delay to its initial value. Intended to be overridden by\n// subclasses.\nBackoffStrategy.prototype.reset_ = function () {\n  throw new Error('BackoffStrategy.reset_() unimplemented.');\n};\nmodule.exports = BackoffStrategy;","map":null,"metadata":{},"sourceType":"script"}