{"ast":null,"code":"'use strict';\n\nvar at; // The index of the current character\nvar ch; // The current character\nvar escapee = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n};\nvar text;\n\n// Call error when something is wrong.\nfunction error(m) {\n  throw {\n    name: 'SyntaxError',\n    message: m,\n    at: at,\n    text: text\n  };\n}\nfunction next(c) {\n  // If a c parameter is provided, verify that it matches the current character.\n  if (c && c !== ch) {\n    error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n  }\n\n  // Get the next character. When there are no more characters, return the empty string.\n\n  ch = text.charAt(at);\n  at += 1;\n  return ch;\n}\nfunction number() {\n  // Parse a number value.\n  var num;\n  var str = '';\n  if (ch === '-') {\n    str = '-';\n    next('-');\n  }\n  while (ch >= '0' && ch <= '9') {\n    str += ch;\n    next();\n  }\n  if (ch === '.') {\n    str += '.';\n    while (next() && ch >= '0' && ch <= '9') {\n      str += ch;\n    }\n  }\n  if (ch === 'e' || ch === 'E') {\n    str += ch;\n    next();\n    if (ch === '-' || ch === '+') {\n      str += ch;\n      next();\n    }\n    while (ch >= '0' && ch <= '9') {\n      str += ch;\n      next();\n    }\n  }\n  num = Number(str);\n  if (!isFinite(num)) {\n    error('Bad number');\n  }\n  return num;\n}\nfunction string() {\n  // Parse a string value.\n  var hex;\n  var i;\n  var str = '';\n  var uffff;\n\n  // When parsing for string values, we must look for \" and \\ characters.\n  if (ch === '\"') {\n    while (next()) {\n      if (ch === '\"') {\n        next();\n        return str;\n      } else if (ch === '\\\\') {\n        next();\n        if (ch === 'u') {\n          uffff = 0;\n          for (i = 0; i < 4; i += 1) {\n            hex = parseInt(next(), 16);\n            if (!isFinite(hex)) {\n              break;\n            }\n            uffff = uffff * 16 + hex;\n          }\n          str += String.fromCharCode(uffff);\n        } else if (typeof escapee[ch] === 'string') {\n          str += escapee[ch];\n        } else {\n          break;\n        }\n      } else {\n        str += ch;\n      }\n    }\n  }\n  error('Bad string');\n}\n\n// Skip whitespace.\nfunction white() {\n  while (ch && ch <= ' ') {\n    next();\n  }\n}\n\n// true, false, or null.\nfunction word() {\n  switch (ch) {\n    case 't':\n      next('t');\n      next('r');\n      next('u');\n      next('e');\n      return true;\n    case 'f':\n      next('f');\n      next('a');\n      next('l');\n      next('s');\n      next('e');\n      return false;\n    case 'n':\n      next('n');\n      next('u');\n      next('l');\n      next('l');\n      return null;\n    default:\n      error(\"Unexpected '\" + ch + \"'\");\n  }\n}\n\n// Parse an array value.\nfunction array() {\n  var arr = [];\n  if (ch === '[') {\n    next('[');\n    white();\n    if (ch === ']') {\n      next(']');\n      return arr; // empty array\n    }\n\n    while (ch) {\n      arr.push(value()); // eslint-disable-line no-use-before-define\n      white();\n      if (ch === ']') {\n        next(']');\n        return arr;\n      }\n      next(',');\n      white();\n    }\n  }\n  error('Bad array');\n}\n\n// Parse an object value.\nfunction object() {\n  var key;\n  var obj = {};\n  if (ch === '{') {\n    next('{');\n    white();\n    if (ch === '}') {\n      next('}');\n      return obj; // empty object\n    }\n\n    while (ch) {\n      key = string();\n      white();\n      next(':');\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        error('Duplicate key \"' + key + '\"');\n      }\n      obj[key] = value(); // eslint-disable-line no-use-before-define\n      white();\n      if (ch === '}') {\n        next('}');\n        return obj;\n      }\n      next(',');\n      white();\n    }\n  }\n  error('Bad object');\n}\n\n// Parse a JSON value. It could be an object, an array, a string, a number, or a word.\nfunction value() {\n  white();\n  switch (ch) {\n    case '{':\n      return object();\n    case '[':\n      return array();\n    case '\"':\n      return string();\n    case '-':\n      return number();\n    default:\n      return ch >= '0' && ch <= '9' ? number() : word();\n  }\n}\n\n// Return the json_parse function. It will have access to all of the above functions and variables.\nmodule.exports = function (source, reviver) {\n  var result;\n  text = source;\n  at = 0;\n  ch = ' ';\n  result = value();\n  white();\n  if (ch) {\n    error('Syntax error');\n  }\n\n  // If there is a reviver function, we recursively walk the new structure,\n  // passing each name/value pair to the reviver function for possible\n  // transformation, starting with a temporary root object that holds the result\n  // in an empty key. If there is not a reviver function, we simply return the\n  // result.\n\n  return typeof reviver === 'function' ? function walk(holder, key) {\n    var k;\n    var v;\n    var val = holder[key];\n    if (val && typeof val === 'object') {\n      for (k in value) {\n        if (Object.prototype.hasOwnProperty.call(val, k)) {\n          v = walk(val, k);\n          if (typeof v === 'undefined') {\n            delete val[k];\n          } else {\n            val[k] = v;\n          }\n        }\n      }\n    }\n    return reviver.call(holder, key, val);\n  }({\n    '': result\n  }, '') : result;\n};","map":null,"metadata":{},"sourceType":"script"}