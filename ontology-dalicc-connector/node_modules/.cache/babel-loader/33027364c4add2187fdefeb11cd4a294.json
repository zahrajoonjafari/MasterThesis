{"ast":null,"code":"var ethUtil = require('ethereumjs-util');\nvar ethAbi = require('ethereumjs-abi');\nmodule.exports = {\n  concatSig: function concatSig(v, r, s) {\n    var rSig = ethUtil.fromSigned(r);\n    var sSig = ethUtil.fromSigned(s);\n    var vSig = ethUtil.bufferToInt(v);\n    var rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n    var sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n    var vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n  },\n  normalize: function normalize(input) {\n    if (!input) return;\n    if (typeof input === 'number') {\n      var buffer = ethUtil.toBuffer(input);\n      input = ethUtil.bufferToHex(buffer);\n    }\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n      msg += ' received ' + typeof input + ': ' + input;\n      throw new Error(msg);\n    }\n    return ethUtil.addHexPrefix(input.toLowerCase());\n  },\n  personalSign: function personalSign(privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data);\n    var msgHash = ethUtil.hashPersonalMessage(message);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n    return serialized;\n  },\n  recoverPersonalSignature: function recoverPersonalSignature(msgParams) {\n    var publicKey = getPublicKeyFor(msgParams);\n    var sender = ethUtil.publicToAddress(publicKey);\n    var senderHex = ethUtil.bufferToHex(sender);\n    return senderHex;\n  },\n  extractPublicKey: function extractPublicKey(msgParams) {\n    var publicKey = getPublicKeyFor(msgParams);\n    return '0x' + publicKey.toString('hex');\n  },\n  typedSignatureHash: function typedSignatureHash(typedData) {\n    var hashBuffer = _typedSignatureHash(typedData);\n    return ethUtil.bufferToHex(hashBuffer);\n  },\n  signTypedData: function signTypedData(privateKey, msgParams) {\n    var msgHash = _typedSignatureHash(msgParams.data);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n  },\n  recoverTypedSignature: function recoverTypedSignature(msgParams) {\n    var msgHash = _typedSignatureHash(msgParams.data);\n    var publicKey = recoverPublicKey(msgHash, msgParams.sig);\n    var sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n  }\n};\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction _typedSignatureHash(typedData) {\n  var error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !typedData.length) throw error;\n  var data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n  });\n  var types = typedData.map(function (e) {\n    return e.type;\n  });\n  var schema = typedData.map(function (e) {\n    if (!e.name) throw error;\n    return e.type + ' ' + e.name;\n  });\n  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);\n}\nfunction recoverPublicKey(hash, sig) {\n  var signature = ethUtil.toBuffer(sig);\n  var sigParams = ethUtil.fromRpcSig(signature);\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\nfunction getPublicKeyFor(msgParams) {\n  var message = ethUtil.toBuffer(msgParams.data);\n  var msgHash = ethUtil.hashPersonalMessage(message);\n  return recoverPublicKey(msgHash, msgParams.sig);\n}\nfunction padWithZeroes(number, length) {\n  var myString = '' + number;\n  while (myString.length < length) {\n    myString = '0' + myString;\n  }\n  return myString;\n}","map":null,"metadata":{},"sourceType":"script"}