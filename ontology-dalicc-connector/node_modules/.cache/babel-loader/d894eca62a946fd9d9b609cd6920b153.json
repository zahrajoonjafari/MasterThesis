{"ast":null,"code":"/* global define */\n'use strict';\n\nexports.__esModule = true;\nvar _utils = require('../utils');\nvar SourceNode = undefined;\ntry {\n  /* istanbul ignore next */\n  if (typeof define !== 'function' || !define.amd) {\n    // We don't support this in AMD environments. For these environments, we asusme that\n    // they are running on the browser and thus have no need for the source-map library.\n    var SourceMap = require('source-map');\n    SourceNode = SourceMap.SourceNode;\n  }\n} catch (err) {}\n/* NOP */\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\nif (!SourceNode) {\n  SourceNode = function SourceNode(line, column, srcFile, chunks) {\n    this.src = '';\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n  SourceNode.prototype = {\n    add: function add(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src += chunks;\n    },\n    prepend: function prepend(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function toStringWithSourceMap() {\n      return {\n        code: this.toString()\n      };\n    },\n    toString: function toString() {\n      return this.src;\n    }\n  };\n}\nfunction castChunk(chunk, codeGen, loc) {\n  if (_utils.isArray(chunk)) {\n    var ret = [];\n    for (var i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n  return chunk;\n}\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\nCodeGen.prototype = {\n  isEmpty: function isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function prepend(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function push(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n  merge: function merge() {\n    var source = this.empty();\n    this.each(function (line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n  each: function each(iter) {\n    for (var i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n  empty: function empty() {\n    var loc = this.currentLocation || {\n      start: {}\n    };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function wrap(chunk) {\n    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || {\n      start: {}\n    } : arguments[1];\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n    chunk = castChunk(chunk, this, loc);\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);\n  },\n  functionCall: function functionCall(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n  quotedString: function quotedString(str) {\n    return '\"' + (str + '').replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\u2028/g, \"\\\\u2028\") // Per Ecma-262 7.3 + 7.8.4\n    .replace(/\\u2029/g, \"\\\\u2029\") + '\"';\n  },\n  objectLiteral: function objectLiteral(obj) {\n    // istanbul ignore next\n\n    var _this = this;\n    var pairs = [];\n    Object.keys(obj).forEach(function (key) {\n      var value = castChunk(obj[key], _this);\n      if (value !== 'undefined') {\n        pairs.push([_this.quotedString(key), ':', value]);\n      }\n    });\n    var ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n  generateList: function generateList(entries) {\n    var ret = this.empty();\n    for (var i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n      ret.add(castChunk(entries[i], this));\n    }\n    return ret;\n  },\n  generateArray: function generateArray(entries) {\n    var ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n    return ret;\n  }\n};\nexports['default'] = CodeGen;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}