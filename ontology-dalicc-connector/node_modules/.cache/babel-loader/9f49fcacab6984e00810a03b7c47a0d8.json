{"ast":null,"code":"'use strict';\n\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = {\n  // table of character substitutions\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\f': '\\\\f',\n  '\\r': '\\\\r',\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\'\n};\nvar rep;\nfunction quote(string) {\n  // If the string contains no control characters, no quote characters, and no\n  // backslash characters, then we can safely slap some quotes around it.\n  // Otherwise we must also replace the offending characters with safe escape sequences.\n\n  escapable.lastIndex = 0;\n  return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n    var c = meta[a];\n    return typeof c === 'string' ? c : \"\\\\u\" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n  }) + '\"' : '\"' + string + '\"';\n}\nfunction str(key, holder) {\n  // Produce a string from holder[key].\n  var i; // The loop counter.\n  var k; // The member key.\n  var v; // The member value.\n  var length;\n  var mind = gap;\n  var partial;\n  var value = holder[key];\n\n  // If the value has a toJSON method, call it to obtain a replacement value.\n  if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n    value = value.toJSON(key);\n  }\n\n  // If we were called with a replacer function, then call the replacer to obtain a replacement value.\n  if (typeof rep === 'function') {\n    value = rep.call(holder, key, value);\n  }\n\n  // What happens next depends on the value's type.\n  switch (typeof value) {\n    case 'string':\n      return quote(value);\n    case 'number':\n      // JSON numbers must be finite. Encode non-finite numbers as null.\n      return isFinite(value) ? String(value) : 'null';\n    case 'boolean':\n    case 'null':\n      // If the value is a boolean or null, convert it to a string. Note:\n      // typeof null does not produce 'null'. The case is included here in\n      // the remote chance that this gets fixed someday.\n      return String(value);\n    case 'object':\n      if (!value) {\n        return 'null';\n      }\n      gap += indent;\n      partial = [];\n\n      // Array.isArray\n      if (Object.prototype.toString.apply(value) === '[object Array]') {\n        length = value.length;\n        for (i = 0; i < length; i += 1) {\n          partial[i] = str(i, value) || 'null';\n        }\n\n        // Join all of the elements together, separated with commas, and wrap them in brackets.\n        v = partial.length === 0 ? '[]' : gap ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' : '[' + partial.join(',') + ']';\n        gap = mind;\n        return v;\n      }\n\n      // If the replacer is an array, use it to select the members to be stringified.\n      if (rep && typeof rep === 'object') {\n        length = rep.length;\n        for (i = 0; i < length; i += 1) {\n          k = rep[i];\n          if (typeof k === 'string') {\n            v = str(k, value);\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      } else {\n        // Otherwise, iterate through all of the keys in the object.\n        for (k in value) {\n          if (Object.prototype.hasOwnProperty.call(value, k)) {\n            v = str(k, value);\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      }\n\n      // Join all of the member texts together, separated with commas, and wrap them in braces.\n\n      v = partial.length === 0 ? '{}' : gap ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' : '{' + partial.join(',') + '}';\n      gap = mind;\n      return v;\n    default:\n  }\n}\nmodule.exports = function (value, replacer, space) {\n  var i;\n  gap = '';\n  indent = '';\n\n  // If the space parameter is a number, make an indent string containing that many spaces.\n  if (typeof space === 'number') {\n    for (i = 0; i < space; i += 1) {\n      indent += ' ';\n    }\n  } else if (typeof space === 'string') {\n    // If the space parameter is a string, it will be used as the indent string.\n    indent = space;\n  }\n\n  // If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n  rep = replacer;\n  if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n    throw new Error('JSON.stringify');\n  }\n\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n  return str('', {\n    '': value\n  });\n};","map":null,"metadata":{},"sourceType":"script"}