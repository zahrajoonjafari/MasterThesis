{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function withTimeout(sync, timeout, timeoutError) {\n  var _this = this;\n  if (timeoutError === void 0) {\n    timeoutError = new Error('timeout');\n  }\n  return {\n    acquire: function acquire() {\n      return new Promise(function (resolve, reject) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var isTimeout, ticket, release;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                isTimeout = false;\n                setTimeout(function () {\n                  isTimeout = true;\n                  reject(timeoutError);\n                }, timeout);\n                return [4 /*yield*/, sync.acquire()];\n              case 1:\n                ticket = _a.sent();\n                if (isTimeout) {\n                  release = Array.isArray(ticket) ? ticket[1] : ticket;\n                  release();\n                } else {\n                  resolve(ticket);\n                }\n                return [2 /*return*/];\n            }\n          });\n        });\n      });\n    },\n\n    runExclusive: function runExclusive(callback) {\n      return __awaiter(this, void 0, void 0, function () {\n        var release, ticket;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              release = function release() {\n                return undefined;\n              };\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1,, 7, 8]);\n              return [4 /*yield*/, this.acquire()];\n            case 2:\n              ticket = _a.sent();\n              if (!Array.isArray(ticket)) return [3 /*break*/, 4];\n              release = ticket[1];\n              return [4 /*yield*/, callback(ticket[0])];\n            case 3:\n              return [2 /*return*/, _a.sent()];\n            case 4:\n              release = ticket;\n              return [4 /*yield*/, callback()];\n            case 5:\n              return [2 /*return*/, _a.sent()];\n            case 6:\n              return [3 /*break*/, 8];\n            case 7:\n              release();\n              return [7 /*endfinally*/];\n            case 8:\n              return [2 /*return*/];\n          }\n        });\n      });\n    },\n\n    release: function release() {\n      sync.release();\n    },\n    isLocked: function isLocked() {\n      return sync.isLocked();\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}