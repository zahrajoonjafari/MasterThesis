{"ast":null,"code":"/*\n * Copyright (c) 2012 Mathieu Turcotte\n * Licensed under the MIT license.\n */\n\nvar util = require('util');\nvar errors = module.exports = require('./errors');\nfunction failCheck(ExceptionConstructor, callee, messageFormat, formatArgs) {\n  messageFormat = messageFormat || '';\n  var message = util.format.apply(this, [messageFormat].concat(formatArgs));\n  var error = new ExceptionConstructor(message);\n  Error.captureStackTrace(error, callee);\n  throw error;\n}\nfunction failArgumentCheck(callee, message, formatArgs) {\n  failCheck(errors.IllegalArgumentError, callee, message, formatArgs);\n}\nfunction failStateCheck(callee, message, formatArgs) {\n  failCheck(errors.IllegalStateError, callee, message, formatArgs);\n}\nmodule.exports.checkArgument = function (value, message) {\n  if (!value) {\n    failArgumentCheck(arguments.callee, message, Array.prototype.slice.call(arguments, 2));\n  }\n};\nmodule.exports.checkState = function (value, message) {\n  if (!value) {\n    failStateCheck(arguments.callee, message, Array.prototype.slice.call(arguments, 2));\n  }\n};\nmodule.exports.checkIsDef = function (value, message) {\n  if (value !== undefined) {\n    return value;\n  }\n  failArgumentCheck(arguments.callee, message || 'Expected value to be defined but was undefined.', Array.prototype.slice.call(arguments, 2));\n};\nmodule.exports.checkIsDefAndNotNull = function (value, message) {\n  // Note that undefined == null.\n  if (value != null) {\n    return value;\n  }\n  failArgumentCheck(arguments.callee, message || 'Expected value to be defined and not null but got \"' + typeOf(value) + '\".', Array.prototype.slice.call(arguments, 2));\n};\n\n// Fixed version of the typeOf operator which returns 'null' for null values\n// and 'array' for arrays.\nfunction typeOf(value) {\n  var s = typeof value;\n  if (s == 'object') {\n    if (!value) {\n      return 'null';\n    } else if (value instanceof Array) {\n      return 'array';\n    }\n  }\n  return s;\n}\nfunction typeCheck(expect) {\n  return function (value, message) {\n    var type = typeOf(value);\n    if (type == expect) {\n      return value;\n    }\n    failArgumentCheck(arguments.callee, message || 'Expected \"' + expect + '\" but got \"' + type + '\".', Array.prototype.slice.call(arguments, 2));\n  };\n}\nmodule.exports.checkIsString = typeCheck('string');\nmodule.exports.checkIsArray = typeCheck('array');\nmodule.exports.checkIsNumber = typeCheck('number');\nmodule.exports.checkIsBoolean = typeCheck('boolean');\nmodule.exports.checkIsFunction = typeCheck('function');\nmodule.exports.checkIsObject = typeCheck('object');","map":null,"metadata":{},"sourceType":"script"}