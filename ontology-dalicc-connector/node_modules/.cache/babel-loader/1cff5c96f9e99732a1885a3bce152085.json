{"ast":null,"code":"'use strict';\n\nvar json = typeof JSON !== 'undefined' ? JSON : require('jsonify');\nvar isArray = Array.isArray || function (x) {\n  return {}.toString.call(x) === '[object Array]';\n};\nvar objectKeys = Object.keys || function (obj) {\n  var has = Object.prototype.hasOwnProperty || function () {\n    return true;\n  };\n  var keys = [];\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nmodule.exports = function (obj, opts) {\n  if (!opts) {\n    opts = {};\n  }\n  if (typeof opts === 'function') {\n    opts = {\n      cmp: opts\n    };\n  }\n  var space = opts.space || '';\n  if (typeof space === 'number') {\n    space = Array(space + 1).join(' ');\n  }\n  var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;\n  var replacer = opts.replacer || function (key, value) {\n    return value;\n  };\n  var cmp = opts.cmp && function (f) {\n    return function (node) {\n      return function (a, b) {\n        var aobj = {\n          key: a,\n          value: node[a]\n        };\n        var bobj = {\n          key: b,\n          value: node[b]\n        };\n        return f(aobj, bobj);\n      };\n    };\n  }(opts.cmp);\n  var seen = [];\n  return function stringify(parent, key, node, level) {\n    var indent = space ? '\\n' + new Array(level + 1).join(space) : '';\n    var colonSeparator = space ? ': ' : ':';\n    if (node && node.toJSON && typeof node.toJSON === 'function') {\n      node = node.toJSON();\n    }\n    node = replacer.call(parent, key, node);\n    if (node === undefined) {\n      return;\n    }\n    if (typeof node !== 'object' || node === null) {\n      return json.stringify(node);\n    }\n    if (isArray(node)) {\n      var out = [];\n      for (var i = 0; i < node.length; i++) {\n        var item = stringify(node, i, node[i], level + 1) || json.stringify(null);\n        out.push(indent + space + item);\n      }\n      return '[' + out.join(',') + indent + ']';\n    }\n    if (seen.indexOf(node) !== -1) {\n      if (cycles) {\n        return json.stringify('__cycle__');\n      }\n      throw new TypeError('Converting circular structure to JSON');\n    } else {\n      seen.push(node);\n    }\n    var keys = objectKeys(node).sort(cmp && cmp(node));\n    var out = [];\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = stringify(node, key, node[key], level + 1);\n      if (!value) {\n        continue;\n      }\n      var keyValue = json.stringify(key) + colonSeparator + value;\n      out.push(indent + space + keyValue);\n    }\n    seen.splice(seen.indexOf(node), 1);\n    return '{' + out.join(',') + indent + '}';\n  }({\n    '': obj\n  }, '', obj, 0);\n};","map":null,"metadata":{},"sourceType":"script"}