import type * as RDF from '@rdfjs/types';
import { Algebra as Alg } from 'sparqlalgebrajs';
import type { AsyncExtensionFunctionCreator } from './evaluators/AsyncEvaluator';
import type { SyncExtensionFunctionCreator } from './evaluators/SyncEvaluator';
import * as E from './expressions';
declare type FunctionCreatorConfig = {
    type: 'sync';
    creator: SyncExtensionFunctionCreator;
} | {
    type: 'async';
    creator: AsyncExtensionFunctionCreator;
};
export declare function transformAlgebra(expr: Alg.Expression, creatorConfig: FunctionCreatorConfig): E.Expression;
/**
 * Transforms an RDF term to the internal representation of a term,
 * assuming it is not a variable, which would be an expression (internally).
 *
 * @param term RDF term to transform into internal representation of a term
 */
export declare function transformRDFTermUnsafe(term: RDF.Term): E.Term;
export declare function transformLiteral(lit: RDF.Literal): E.Literal<any>;
export declare function transformAggregate(expr: Alg.AggregateExpression): E.Aggregate;
export declare function transformExistence(expr: Alg.ExistenceExpression): E.Existence;
export {};
