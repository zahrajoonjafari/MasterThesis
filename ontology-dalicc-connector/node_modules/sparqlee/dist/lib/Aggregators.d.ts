import type * as RDF from '@rdfjs/types';
import type { Algebra } from 'sparqlalgebrajs';
import type { SetFunction } from './util/Consts';
export declare abstract class BaseAggregator<State> {
    protected distinct: boolean;
    protected separator: string;
    constructor(expr: Algebra.AggregateExpression);
    static emptyValue(): RDF.Term;
    abstract init(start: RDF.Term): State;
    abstract result(state: State): RDF.Term;
    abstract put(state: State, bindings: RDF.Term): State;
}
export interface IAggregatorClass {
    new (expr: Algebra.AggregateExpression): BaseAggregator<any>;
    emptyValue: () => RDF.Term;
}
export declare const aggregators: Readonly<{
    [key in SetFunction]: IAggregatorClass;
}>;
