{"version":3,"file":"TermTransformer.js","sourceRoot":"","sources":["../../../lib/transformers/TermTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport * as RDFString from 'rdf-string';\nimport type { Algebra as Alg } from 'sparqlalgebrajs';\nimport * as E from '../expressions';\nimport { TypeURL as DT, TypeURL } from '../util/Consts';\nimport * as Err from '../util/Errors';\nimport * as P from '../util/Parsing';\nimport { isSubTypeOf } from '../util/TypeHandling';\nimport type { ISuperTypeProvider } from '../util/TypeHandling';\n\nexport interface ITermTransformer {\n  transformRDFTermUnsafe: (term: RDF.Term) => E.Term;\n  transformLiteral: (lit: RDF.Literal) => E.Literal<any>;\n}\n\nexport class TermTransformer implements ITermTransformer {\n  public constructor(protected readonly superTypeProvider: ISuperTypeProvider) {\n  }\n\n  /**\n   * Transforms an RDF term to the internal representation of a term,\n   * assuming it is not a variable, which would be an expression (internally).\n   *\n   * @param term RDF term to transform into internal representation of a term\n   */\n  public transformRDFTermUnsafe(term: RDF.Term): E.Term {\n    return <E.Term> this.transformTerm({\n      term,\n      type: 'expression',\n      expressionType: 'term',\n    });\n  }\n\n  protected transformTerm(term: Alg.TermExpression): E.Expression {\n    if (!term.term) {\n      throw new Err.InvalidExpression(term);\n    }\n\n    switch (term.term.termType) {\n      case 'Variable':\n        return new E.Variable(RDFString.termToString(term.term));\n      case 'Literal':\n        return this.transformLiteral(term.term);\n      case 'NamedNode':\n        return new E.NamedNode(term.term.value);\n      case 'BlankNode':\n        return new E.BlankNode(term.term.value);\n      default:\n        throw new Err.InvalidTermType(term);\n    }\n  }\n\n  /**\n   * @param lit the rdf literal we want to transform to an internal Literal expression.\n   */\n  public transformLiteral(lit: RDF.Literal): E.Literal<any> {\n    // Both here and within the switch we transform to LangStringLiteral or StringLiteral.\n    // We do this when we detect a simple literal being used.\n    // Original issue regarding this behaviour: https://github.com/w3c/sparql-12/issues/112\n    if (!lit.datatype || [ null, undefined, '' ].includes(lit.datatype.value)) {\n      return lit.language ?\n        new E.LangStringLiteral(lit.value, lit.language) :\n        new E.StringLiteral(lit.value);\n    }\n\n    const dataType = lit.datatype.value;\n\n    if (isSubTypeOf(dataType, TypeURL.XSD_STRING, this.superTypeProvider)) {\n      return new E.StringLiteral(lit.value, dataType);\n    }\n    if (isSubTypeOf(dataType, DT.RDF_LANG_STRING, this.superTypeProvider)) {\n      return new E.LangStringLiteral(lit.value, lit.language);\n    }\n    if (isSubTypeOf(dataType, DT.XSD_DATE_TIME, this.superTypeProvider)) {\n      // It should be noted how we don't care if its a XSD_DATE_TIME_STAMP or not.\n      // This is because sparql functions don't care about the timezone.\n      // It's also doesn't break the specs because we keep the string representation stored,\n      // that way we can always give it back. There are also no sparql functions that alter a date.\n      // (So the representation initial representation always stays valid)\n      // https://github.com/comunica/sparqlee/pull/103#discussion_r688462368\n      const dateVal: Date = new Date(lit.value);\n      if (Number.isNaN(dateVal.getTime())) {\n        return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n      }\n      return new E.DateTimeLiteral(new Date(lit.value), lit.value, dataType);\n    }\n    if (isSubTypeOf(dataType, DT.XSD_BOOLEAN, this.superTypeProvider)) {\n      if (lit.value !== 'true' && lit.value !== 'false' && lit.value !== '1' && lit.value !== '0') {\n        return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n      }\n      return new E.BooleanLiteral(lit.value === 'true' || lit.value === '1', lit.value);\n    }\n    if (isSubTypeOf(dataType, DT.XSD_DECIMAL, this.superTypeProvider)) {\n      const intVal: number = P.parseXSDDecimal(lit.value);\n      if (intVal === undefined) {\n        return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n      }\n      if (isSubTypeOf(dataType, DT.XSD_INTEGER, this.superTypeProvider)) {\n        return new E.IntegerLiteral(intVal, dataType, lit.value);\n      }\n      // If type is not an integer it's just a decimal.\n      return new E.DecimalLiteral(intVal, dataType, lit.value);\n    }\n    const isFloat = isSubTypeOf(dataType, DT.XSD_FLOAT, this.superTypeProvider);\n    const isDouble = isSubTypeOf(dataType, DT.XSD_DOUBLE, this.superTypeProvider);\n    if (isFloat || isDouble) {\n      const doubleVal: number = P.parseXSDFloat(lit.value);\n      if (doubleVal === undefined) {\n        return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n      }\n      if (isFloat) {\n        return new E.FloatLiteral(doubleVal, dataType, lit.value);\n      }\n      return new E.DoubleLiteral(doubleVal, dataType, lit.value);\n    }\n    return new E.Literal<string>(lit.value, dataType, lit.value);\n  }\n}\n"]}