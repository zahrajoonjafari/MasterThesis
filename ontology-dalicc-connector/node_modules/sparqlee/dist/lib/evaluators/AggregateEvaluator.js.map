{"version":3,"file":"AggregateEvaluator.js","sourceRoot":"","sources":["../../../lib/evaluators/AggregateEvaluator.ts"],"names":[],"mappings":";;;AAEA,qEAAkE;AAElE,mDAAgD;AAEhD,8DAA8D;AAC9D,MAAa,kBAAmB,SAAQ,+CAAsB;IAG5D,YAAmB,IAAiC,EAAE,MAA6B,EAAE,UAAoB;QACvG,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC9D,CAAC;IAEM,GAAG,CAAC,QAAkB;QAC3B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtB,CAAC;IAES,KAAK,CAAC,QAAkB;QAChC,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACpD;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACvB;IACH,CAAC;IAES,SAAS,CAAC,GAAY;QAC9B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,GAAG,CAAC;SACX;aAAM;YACL,gEAAgE;YAChE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;YACpB,wDAAwD;YACxD,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC;SAC/B;IACH,CAAC;IAEO,IAAI,CAAC,KAAe;QAC1B,IAAI;YACF,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC7C,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxC;SACF;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACvB;IACH,CAAC;CACF;AA5CD,gDA4CC","sourcesContent":["import type { Algebra } from 'sparqlalgebrajs';\nimport type { Bindings } from '../Types';\nimport { BaseAggregateEvaluator } from './BaseAggregateEvaluator';\nimport type { ISyncEvaluatorConfig } from './SyncEvaluator';\nimport { SyncEvaluator } from './SyncEvaluator';\n\n// TODO: Support hooks & change name to SyncAggregateEvaluator\nexport class AggregateEvaluator extends BaseAggregateEvaluator {\n  private readonly evaluator: SyncEvaluator;\n\n  public constructor(expr: Algebra.AggregateExpression, config?: ISyncEvaluatorConfig, throwError?: boolean) {\n    super(expr, throwError);\n    this.evaluator = new SyncEvaluator(expr.expression, config);\n  }\n\n  public put(bindings: Bindings): void {\n    this.init(bindings);\n  }\n\n  protected __put(bindings: Bindings): void {\n    try {\n      const term = this.evaluator.evaluate(bindings);\n      this.state = this.aggregator.put(this.state, term);\n    } catch (error: unknown) {\n      this.safeThrow(error);\n    }\n  }\n\n  protected safeThrow(err: unknown): void {\n    if (this.throwError) {\n      throw err;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      this.put = () => {};\n      // eslint-disable-next-line unicorn/no-useless-undefined\n      this.result = () => undefined;\n    }\n  }\n\n  private init(start: Bindings): void {\n    try {\n      const startTerm = this.evaluator.evaluate(start);\n      this.state = this.aggregator.init(startTerm);\n      if (this.state) {\n        this.put = this.__put.bind(this);\n        this.result = this.__result.bind(this);\n      }\n    } catch (error: unknown) {\n      this.safeThrow(error);\n    }\n  }\n}\n\n"]}