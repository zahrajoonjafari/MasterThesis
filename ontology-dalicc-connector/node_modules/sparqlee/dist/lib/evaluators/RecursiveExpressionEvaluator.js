"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncRecursiveEvaluator = exports.AsyncRecursiveEvaluator = void 0;
const E = require("../expressions");
const Transformation_1 = require("../Transformation");
const Err = require("../util/Errors");
const sharedEvaluators = {
    term(expr, mapping) {
        return expr;
    },
    variable(expr, mapping) {
        const term = mapping.get(expr.name);
        if (!term) {
            throw new Err.UnboundVariableError(expr.name, mapping);
        }
        return (0, Transformation_1.transformRDFTermUnsafe)(term);
    },
};
class AsyncRecursiveEvaluator {
    constructor(context) {
        this.context = context;
        this.subEvaluators = {
            // Shared
            [E.ExpressionType.Term]: sharedEvaluators.term.bind(this),
            [E.ExpressionType.Variable]: sharedEvaluators.variable.bind(this),
            // Async
            [E.ExpressionType.Operator]: this.evalOperator.bind(this),
            [E.ExpressionType.SpecialOperator]: this.evalSpecialOperator.bind(this),
            [E.ExpressionType.Named]: this.evalNamed.bind(this),
            [E.ExpressionType.Existence]: this.evalExistence.bind(this),
            [E.ExpressionType.Aggregate]: this.evalAggregate.bind(this),
            [E.ExpressionType.AsyncExtension]: this.evalAsyncExtension.bind(this),
        };
    }
    async evaluate(expr, mapping) {
        const evaluator = this.subEvaluators[expr.expressionType];
        if (!evaluator) {
            throw new Err.InvalidExpressionType(expr);
        }
        return evaluator.bind(this)(expr, mapping);
    }
    async evalOperator(expr, mapping) {
        const argPromises = expr.args.map(arg => this.evaluate(arg, mapping));
        const argResults = await Promise.all(argPromises);
        return expr.apply(argResults);
    }
    async evalSpecialOperator(expr, mapping) {
        const evaluate = this.evaluate.bind(this);
        const context = {
            args: expr.args,
            mapping,
            evaluate,
            context: {
                now: this.context.now,
                baseIRI: this.context.baseIRI,
                bnode: this.context.bnode,
            },
        };
        return expr.applyAsync(context);
    }
    async _evalAsyncArgs(args, mapping) {
        const argPromises = args.map(arg => this.evaluate(arg, mapping));
        return await Promise.all(argPromises);
    }
    async evalNamed(expr, mapping) {
        return expr.apply(await this._evalAsyncArgs(expr.args, mapping));
    }
    async evalAsyncExtension(expr, mapping) {
        return await expr.apply(await this._evalAsyncArgs(expr.args, mapping));
    }
    async evalExistence(expr, mapping) {
        if (!this.context.exists) {
            throw new Err.NoExistenceHook();
        }
        return new E.BooleanLiteral(await this
            .context
            .exists(expr.expression, mapping));
    }
    // TODO: Remove?
    async evalAggregate(expr, _mapping) {
        if (!this.context.aggregate) {
            throw new Err.NoExistenceHook();
        }
        return (0, Transformation_1.transformRDFTermUnsafe)(await this
            .context
            .aggregate(expr.expression));
    }
}
exports.AsyncRecursiveEvaluator = AsyncRecursiveEvaluator;
class SyncRecursiveEvaluator {
    constructor(context) {
        this.context = context;
        this.subEvaluators = {
            // Shared
            [E.ExpressionType.Term]: sharedEvaluators.term.bind(this),
            [E.ExpressionType.Variable]: sharedEvaluators.variable.bind(this),
            // Sync
            [E.ExpressionType.Operator]: this.evalOperator.bind(this),
            [E.ExpressionType.SpecialOperator]: this.evalSpecialOperator.bind(this),
            [E.ExpressionType.Named]: this.evalNamed.bind(this),
            [E.ExpressionType.Existence]: this.evalExistence.bind(this),
            [E.ExpressionType.Aggregate]: this.evalAggregate.bind(this),
            [E.ExpressionType.SyncExtension]: this.evalSyncExtension.bind(this),
        };
    }
    evaluate(expr, mapping) {
        const evaluator = this.subEvaluators[expr.expressionType];
        if (!evaluator) {
            throw new Err.InvalidExpressionType(expr);
        }
        return evaluator.bind(this)(expr, mapping);
    }
    evalOperator(expr, mapping) {
        const args = expr.args.map(arg => this.evaluate(arg, mapping));
        return expr.apply(args);
    }
    evalSpecialOperator(expr, mapping) {
        const evaluate = this.evaluate.bind(this);
        const context = {
            args: expr.args,
            mapping,
            evaluate,
            context: {
                now: this.context.now,
                baseIRI: this.context.baseIRI,
                bnode: this.context.bnode,
            },
        };
        return expr.applySync(context);
    }
    evalNamed(expr, mapping) {
        const args = expr.args.map(arg => this.evaluate(arg, mapping));
        return expr.apply(args);
    }
    evalSyncExtension(expr, mapping) {
        const args = expr.args.map(arg => this.evaluate(arg, mapping));
        return expr.apply(args);
    }
    evalExistence(expr, mapping) {
        if (!this.context.exists) {
            throw new Err.NoExistenceHook();
        }
        return new E.BooleanLiteral(this
            .context
            .exists(expr.expression, mapping));
    }
    evalAggregate(expr, mapping) {
        if (!this.context.aggregate) {
            throw new Err.NoAggregator();
        }
        return (0, Transformation_1.transformRDFTermUnsafe)(this
            .context
            .aggregate(expr.expression));
    }
}
exports.SyncRecursiveEvaluator = SyncRecursiveEvaluator;
//# sourceMappingURL=RecursiveExpressionEvaluator.js.map