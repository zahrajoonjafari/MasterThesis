import type * as RDF from '@rdfjs/types';
import type { Algebra as Alg } from 'sparqlalgebrajs';
import type * as E from '../expressions/Expressions';
import type { Bindings } from '../Types';
declare type Term = E.TermExpression;
export interface ISyncEvaluatorConfig {
    now?: Date;
    baseIRI?: string;
    exists?: (expression: Alg.ExistenceExpression, mapping: Bindings) => boolean;
    aggregate?: (expression: Alg.AggregateExpression) => RDF.Term;
    bnode?: (input?: string) => RDF.BlankNode;
    extensionFunctionCreator?: SyncExtensionFunctionCreator;
}
export declare type SyncExtensionFunction = (args: RDF.Term[]) => RDF.Term;
export declare type SyncExtensionFunctionCreator = (functionNamedNode: RDF.NamedNode) => SyncExtensionFunction | undefined;
export declare type SyncEvaluatorContext = ISyncEvaluatorConfig & {
    now: Date;
};
export declare class SyncEvaluator {
    algExpr: Alg.Expression;
    config: ISyncEvaluatorConfig;
    private readonly expr;
    private readonly evaluator;
    constructor(algExpr: Alg.Expression, config?: ISyncEvaluatorConfig);
    evaluate(mapping: Bindings): RDF.Term;
    evaluateAsEBV(mapping: Bindings): boolean;
    evaluateAsInternal(mapping: Bindings): Term;
}
export {};
