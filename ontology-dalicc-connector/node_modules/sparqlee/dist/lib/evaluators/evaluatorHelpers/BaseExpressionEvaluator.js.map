{"version":3,"file":"BaseExpressionEvaluator.js","sourceRoot":"","sources":["../../../../lib/evaluators/evaluatorHelpers/BaseExpressionEvaluator.ts"],"names":[],"mappings":";;;AAIA,yCAAyC;AAkBzC,MAAa,uBAAuB;IAClC,YAAsC,eAAiC;QAAjC,oBAAe,GAAf,eAAe,CAAkB;IAAI,CAAC;IAElE,IAAI,CAAC,IAAY,EAAE,OAAiB;QAC5C,OAAO,IAAI,CAAC;IACd,CAAC;IAES,QAAQ,CAAC,IAAgB,EAAE,OAAiB;QACpD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,GAAG,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACxD;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;CACF;AAdD,0DAcC","sourcesContent":["import type * as E from '../../expressions';\nimport type { OverLoadCache } from '../../functions/OverloadTree';\nimport type { ITermTransformer } from '../../transformers/TermTransformer';\nimport type { Bindings } from '../../Types';\nimport * as Err from '../../util/Errors';\nimport type { SuperTypeCallback, TypeCache, ISuperTypeProvider } from '../../util/TypeHandling';\n\nexport interface ISharedContext {\n  now?: Date;\n  baseIRI?: string;\n  overloadCache?: OverLoadCache;\n  typeCache?: TypeCache;\n  getSuperType?: SuperTypeCallback;\n}\n\nexport interface ICompleteSharedContext {\n  now: Date;\n  baseIRI?: string;\n  overloadCache: OverLoadCache;\n  superTypeProvider: ISuperTypeProvider;\n}\n\nexport class BaseExpressionEvaluator {\n  public constructor(protected readonly termTransformer: ITermTransformer) { }\n\n  protected term(expr: E.Term, mapping: Bindings): E.Term {\n    return expr;\n  }\n\n  protected variable(expr: E.Variable, mapping: Bindings): E.Term {\n    const term = mapping.get(expr.name);\n    if (!term) {\n      throw new Err.UnboundVariableError(expr.name, mapping);\n    }\n    return this.termTransformer.transformRDFTermUnsafe(term);\n  }\n}\n"]}