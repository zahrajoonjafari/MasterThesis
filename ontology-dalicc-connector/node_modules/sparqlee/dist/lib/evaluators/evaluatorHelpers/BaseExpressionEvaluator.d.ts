import type * as E from '../../expressions';
import type { OverLoadCache } from '../../functions/OverloadTree';
import type { ITermTransformer } from '../../transformers/TermTransformer';
import type { Bindings } from '../../Types';
import type { SuperTypeCallback, TypeCache, ISuperTypeProvider } from '../../util/TypeHandling';
export interface ISharedContext {
    now?: Date;
    baseIRI?: string;
    overloadCache?: OverLoadCache;
    typeCache?: TypeCache;
    getSuperType?: SuperTypeCallback;
}
export interface ICompleteSharedContext {
    now: Date;
    baseIRI?: string;
    overloadCache: OverLoadCache;
    superTypeProvider: ISuperTypeProvider;
}
export declare class BaseExpressionEvaluator {
    protected readonly termTransformer: ITermTransformer;
    constructor(termTransformer: ITermTransformer);
    protected term(expr: E.Term, mapping: Bindings): E.Term;
    protected variable(expr: E.Variable, mapping: Bindings): E.Term;
}
