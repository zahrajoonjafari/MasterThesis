{"version":3,"file":"Ordering.js","sourceRoot":"","sources":["../../../lib/util/Ordering.ts"],"names":[],"mappings":";;;AAEA,sDAAqD;AAErD,iEAAiE;AACjE,SAAgB,UAAU,CAAC,IAA0B,EAAE,IAA0B,EAAE,WAAoB;IACrG,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;QAC9E,MAAM,MAAM,GAAG,IAAA,iCAAgB,EAAC,IAAI,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,IAAA,iCAAgB,EAAC,IAAI,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;KAC3C;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAPD,gCAOC;AAED,qBAAqB;AACrB,SAAgB,KAAK,CAAC,MAAsB,EAAE,MAAsB,EAAE,WAAoB;IACxF,IAAI,MAAM,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU,EAAE;QAC3C,OAAO,CAAC,CAAC;KACV;IACD,OAAO,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC;AALD,sBAKC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type * as T from '../expressions/Term';\nimport { transformLiteral } from '../Transformation';\n\n// Determine the relative numerical order of the two given terms.\nexport function orderTypes(litA: RDF.Term | undefined, litB: RDF.Term | undefined, isAscending: boolean): -1 | 0 | 1 {\n  if (litA && litA.termType === 'Literal' && litB && litB.termType === 'Literal') {\n    const myLitA = transformLiteral(litA);\n    const myLitB = transformLiteral(litB);\n    return order(myLitA, myLitB, isAscending);\n  }\n  return 0;\n}\n\n// Effective ordering\nexport function order(orderA: T.Literal<any>, orderB: T.Literal<any>, isAscending: boolean): -1 | 0 | 1 {\n  if (orderA.typedValue === orderB.typedValue) {\n    return 0;\n  }\n  return orderA.typedValue > orderB.typedValue === isAscending ? 1 : -1;\n}\n"]}