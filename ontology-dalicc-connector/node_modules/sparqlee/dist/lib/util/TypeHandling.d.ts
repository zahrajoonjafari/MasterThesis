import type * as LRUCache from 'lru-cache';
import type { KnownLiteralTypes } from './Consts';
import { TypeAlias } from './Consts';
export declare type OverrideType = KnownLiteralTypes | 'term';
/**
 * Types that are not mentioned just map to 'term'.
 * When editing this, make sure type promotion and substituion don't start interfering.
 * e.g. when saying something like string -> stringly -> anyUri -> term.
 * This would make substitution on types that promote to each other possible. We and the specs don't want that!
 * A DAG will be created based on this. Make sure it doesn't have any cycles!
 */
export declare const extensionTableInput: Record<KnownLiteralTypes, OverrideType>;
declare type SuperTypeDict = Record<KnownLiteralTypes, number> & {
    __depth: number;
};
declare type SuperTypeDictTable = Record<KnownLiteralTypes, SuperTypeDict>;
export declare type GeneralSuperTypeDict = Record<string, number> & {
    __depth: number;
};
export declare let superTypeDictTable: SuperTypeDictTable;
/**
 * This will return the super types of a type and cache them.
 * @param type IRI we will decide the super types of.
 * @param openWorldType the enabler that provides a way to find super types.
 */
export declare function getSuperTypes(type: string, openWorldType: ISuperTypeProvider): GeneralSuperTypeDict;
export declare function extensionTableInit(): void;
export declare let typeAliasCheck: Record<TypeAlias, boolean>;
export declare function isTypeAlias(type: string): TypeAlias | undefined;
export declare function isKnownLiteralType(type: string): KnownLiteralTypes | undefined;
export declare function isOverrideType(type: string): OverrideType | undefined;
export declare type TypeCache = LRUCache<string, GeneralSuperTypeDict>;
export declare type SuperTypeCallback = (unknownType: string) => string;
export interface ISuperTypeProvider {
    cache: TypeCache;
    discoverer: SuperTypeCallback;
}
/**
 * Internal type of @see isSubTypeOf This only takes knownTypes but doesn't need an enabler
 */
export declare function isInternalSubType(baseType: OverrideType, argumentType: KnownLiteralTypes): boolean;
/**
 * This function needs do be O(1)! The execution time of this function is vital!
 * We define typeA isSubtypeOf typeA as true.
 * @param baseType type you want to provide.
 * @param argumentType type you want to provide @param baseType to.
 * @param openWorldEnabler the enabler to discover super types of unknown types.
 */
export declare function isSubTypeOf(baseType: string, argumentType: KnownLiteralTypes, openWorldEnabler: ISuperTypeProvider): boolean;
export {};
