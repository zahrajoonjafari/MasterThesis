"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runArgsInProcessStatic = exports.runArgsInProcess = exports.runArgs = void 0;
const runner_1 = require("@comunica/runner");
function runArgs(configResourceUrl, argv, stdin, stdout, stderr, exit, env, runnerUri, properties, context) {
    runner_1.run(configResourceUrl, { argv, env, stdin, context }, runnerUri, properties)
        .then((results) => {
        results.forEach((result) => {
            if (result.stdout) {
                result.stdout.on('error', error => {
                    stderr.write(`${error.message}\n`);
                    exit(1);
                });
                result.stdout.pipe(stdout);
                result.stdout.on('end', () => {
                    exit(0);
                });
            }
            if (result.stderr) {
                result.stderr.on('error', error => {
                    stderr.write(`${error.message}\n`);
                    exit(1);
                });
                result.stderr.pipe(stderr);
                result.stderr.on('end', () => {
                    exit(1);
                });
            }
        });
    }).catch((error) => {
        stderr.write(`${error.message}\n`);
        exit(1);
    });
}
exports.runArgs = runArgs;
function runArgsInProcess(moduleRootPath, defaultConfigPath, options) {
    const argv = process.argv.slice(2);
    runArgs(process.env.COMUNICA_CONFIG ? `${process.cwd()}/${process.env.COMUNICA_CONFIG}` : defaultConfigPath, argv, process.stdin, process.stdout, process.stderr, (code) => {
        if (options === null || options === void 0 ? void 0 : options.onDone) {
            options === null || options === void 0 ? void 0 : options.onDone();
        }
        if (code !== 0) {
            process.exit(code);
        }
    }, process.env, undefined, {
        mainModulePath: moduleRootPath,
    }, options === null || options === void 0 ? void 0 : options.context);
}
exports.runArgsInProcess = runArgsInProcess;
function runArgsInProcessStatic(actor, options) {
    const argv = process.argv.slice(2);
    actor.run({ argv, env: process.env, stdin: process.stdin, context: options === null || options === void 0 ? void 0 : options.context })
        .then((result) => {
        if (result.stdout) {
            result.stdout.on('error', error => {
                process.stderr.write(`${error.message}\n`);
                if (options === null || options === void 0 ? void 0 : options.onDone) {
                    options === null || options === void 0 ? void 0 : options.onDone();
                }
                process.exit(1);
            });
            result.stdout.pipe(process.stdout);
            result.stdout.on('end', () => {
                if (options === null || options === void 0 ? void 0 : options.onDone) {
                    options === null || options === void 0 ? void 0 : options.onDone();
                }
            });
        }
        if (result.stderr) {
            result.stderr.on('error', error => {
                process.stderr.write(`${error.message}\n`);
                if (options === null || options === void 0 ? void 0 : options.onDone) {
                    options === null || options === void 0 ? void 0 : options.onDone();
                }
                process.exit(1);
            });
            result.stderr.pipe(process.stderr);
            result.stderr.on('end', () => {
                if (options === null || options === void 0 ? void 0 : options.onDone) {
                    options === null || options === void 0 ? void 0 : options.onDone();
                }
                process.exit(1);
            });
        }
    })
        .catch((error) => {
        process.stderr.write(`${error.message}\n`);
        if (options === null || options === void 0 ? void 0 : options.onDone) {
            options === null || options === void 0 ? void 0 : options.onDone();
        }
        process.exit(1);
    });
}
exports.runArgsInProcessStatic = runArgsInProcessStatic;
//# sourceMappingURL=ArgsRunner.js.map