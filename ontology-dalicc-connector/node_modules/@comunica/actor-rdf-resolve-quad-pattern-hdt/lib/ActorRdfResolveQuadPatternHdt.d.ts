import type { IActionRdfResolveQuadPattern, IActorRdfResolveQuadPatternOutput, IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';
import { ActorRdfResolveQuadPatternSource } from '@comunica/bus-rdf-resolve-quad-pattern';
import type { ActionContext, IActorArgs, IActorTest } from '@comunica/core';
import * as HDT from 'hdt';
import type * as RDF from 'rdf-js';
/**
 * A comunica HDT RDF Resolve Quad Pattern Actor.
 */
export declare class ActorRdfResolveQuadPatternHdt extends ActorRdfResolveQuadPatternSource implements IActorRdfResolveQuadPatternHdtArgs {
    readonly hdtFiles?: string[];
    hdtDocuments: Record<string, Promise<HDT.Document>>;
    closed: boolean;
    protected shouldClose: boolean;
    protected queries: number;
    constructor(args: IActorRdfResolveQuadPatternHdtArgs);
    initializeHdt(hdtFile: string): Promise<HDT.Document>;
    initialize(): Promise<any>;
    deinitialize(): Promise<any>;
    close(): void;
    test(action: IActionRdfResolveQuadPattern): Promise<IActorTest>;
    protected safeClose(): void;
    protected getSource(context: ActionContext): Promise<IQuadSource>;
    protected getOutput(source: IQuadSource, pattern: RDF.Quad, context: ActionContext): Promise<IActorRdfResolveQuadPatternOutput>;
}
export interface IActorRdfResolveQuadPatternHdtArgs extends IActorArgs<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput> {
    /**
     * The HDT files to preload.
     */
    hdtFiles?: string[];
}
