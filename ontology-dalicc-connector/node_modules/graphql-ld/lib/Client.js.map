{"version":3,"file":"Client.js","sourceRoot":"","sources":["Client.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,yDAAwE;AAIxE,iEAA4F;AAG5F,2DAA0E;AAG1E;;;;;;;;GAQG;AACH,MAAa,MAAM;IAOjB,YAAY,IAAiB;QAC3B,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,qCAAa,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1G,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAEpC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB;YAC3D,IAAI,6BAAwB,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,yBAAyB;YAC7D,IAAI,8BAAyB,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAAC;IAClG,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACU,KAAK,CAAC,IAAe;;YAChC,4BAA4B;YAC5B,MAAM,EAAE,aAAa,EAAE,oBAAoB,EAAE,GAAG,OAAO,IAAI,IAAI;gBAC7D,CAAC,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAExF,uBAAuB;YACvB,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAE9F,8CAA8C;YAC9C,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,gBAAgB,EAAE,EAAE,oBAAoB,EAAE,CAAC,CAAC;YAChH,OAAO,EAAE,IAAI,EAAE,CAAC;QAClB,CAAC;KAAA;IAED;;;;;OAKG;IACU,eAAe,CAAC,EAAE,KAAK,EAAE,SAAS,EAAiB;;YAC9D,MAAM,oBAAoB,GAAG,EAAE,CAAC;YAChC,MAAM,OAAO,GAAG;gBACd,oBAAoB;gBACpB,aAAa,EAAE,EAAE;aAClB,CAAC;YAEF,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,wBAAwB;iBACtD,sBAAsB,CAAC,KAAK,EAAE,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE,OAAO,CAAC,CAAC;YAChF,OAAO,EAAE,aAAa,EAAE,oBAAoB,EAAE,CAAC;QACjD,CAAC;KAAA;CAEF;AA/DD,wBA+DC","sourcesContent":["import {Converter as GraphQlToSparqlConverter} from \"graphql-to-sparql\";\nimport {ISingularizeVariables} from \"graphql-to-sparql/lib/IConvertContext\";\nimport {ExecutionResult} from \"graphql/execution/execute\";\nimport {DocumentNode} from \"graphql/language\";\nimport {ContextParser, JsonLdContextNormalized, JsonLdContext} from \"jsonld-context-parser\";\nimport * as RDF from \"@rdfjs/types\";\nimport {Algebra} from \"sparqlalgebrajs\";\nimport {Converter as SparqlJsonToTreeConverter} from \"sparqljson-to-tree\";\nimport {IQueryEngine} from \"./IQueryEngine\";\n\n/**\n * A GraphQL-LD client.\n *\n * Typical usage:\n * ```\n * const client = new Client({ context, queryEngine });\n * const { data } = await client.query({ query: `{ books { name author { name } } }` });\n * ```\n */\nexport class Client {\n\n  private readonly context: Promise<JsonLdContextNormalized>;\n  private readonly queryEngine: IQueryEngine;\n  private readonly graphqlToSparqlConverter: GraphQlToSparqlConverter;\n  private readonly sparqlJsonToTreeConverter: SparqlJsonToTreeConverter;\n\n  constructor(args: IClientArgs) {\n    this.context = (args.contextParser || new ContextParser()).parse(args.context, { baseIRI: args.baseIRI });\n    this.queryEngine = args.queryEngine;\n\n    this.graphqlToSparqlConverter = args.graphqlToSparqlConverter ||\n      new GraphQlToSparqlConverter({ dataFactory: args.dataFactory, requireContext: true });\n    this.sparqlJsonToTreeConverter = args.sparqlJsonToTreeConverter ||\n      new SparqlJsonToTreeConverter({ dataFactory: args.dataFactory, materializeRdfJsTerms: true });\n  }\n\n  /**\n   * Execute a GraphQL-LD query.\n   *\n   * There are three ways of invoking this methods:\n   * 1. with a GraphQL query string and optional variables:\n   *    `client.query({ query: `{...}`, variables: { varName: 123 } })`\n   * 2. with a parsed GraphQL query and optional variables:\n   *    `client.query({ query: gql`{...}`, variables: { varName: 123 } })`\n   * 3. with a SPARQL algebra object and a singularizeVariables object\n   *    `client.query({ sparqlAlgebra, singularizeVariables })`\n   *    This corresponds to the result of {@link Client#graphQlToSparql}.\n   *\n   * @param {QueryArgs} args Query+variables, or SPARQL algebra+singularize variables.\n   * @return {Promise<ExecutionResult>} A promise resolving to a GraphQL result.\n   */\n  public async query(args: QueryArgs): Promise<ExecutionResult> {\n    // Convert GraphQL to SPARQL\n    const { sparqlAlgebra, singularizeVariables } = 'query' in args\n      ? await this.graphQlToSparql({ query: args.query, variables: args.variables }) : args;\n\n    // Execute SPARQL query\n    const sparqlJsonResult = await this.queryEngine.query(sparqlAlgebra, args.queryEngineOptions);\n\n    // Convert SPARQL response to GraphQL response\n    const data = this.sparqlJsonToTreeConverter.sparqlJsonResultsToTree(sparqlJsonResult, { singularizeVariables });\n    return { data };\n  }\n\n  /**\n   * Convert a GraphQL query to SPARQL algebra and a singularize variables object.\n   * @param {string | DocumentNode} query\n   * @param {{[p: string]: any}} variables\n   * @return {Promise<IGraphQlToSparqlResult>}\n   */\n  public async graphQlToSparql({ query, variables }: IQueryArgsRaw): Promise<IGraphQlToSparqlResult> {\n    const singularizeVariables = {};\n    const options = {\n      singularizeVariables,\n      variablesDict: {}, // TODO: convert variables values to ValueNode's\n    };\n\n    const sparqlAlgebra = await this.graphqlToSparqlConverter\n      .graphqlToSparqlAlgebra(query, (await this.context).getContextRaw(), options);\n    return { sparqlAlgebra, singularizeVariables };\n  }\n\n}\n\nexport interface IClientArgs {\n  /**\n   * A JSON-LD context.\n   * This may be an object, array, or a string (URL to remote context)\n   */\n  context: JsonLdContext;\n  /**\n   * A query engine that will be used to execute SPARQL queries.\n   */\n  queryEngine: IQueryEngine;\n\n  /**\n   * An optional base IRI.\n   */\n  baseIRI?: string;\n  /**\n   * An optional data factory for RDF quads and terms.\n   */\n  dataFactory?: RDF.DataFactory;\n\n  /**\n   * An optional JSON-LD context parser.\n   * Provide this to override the default context parser options.\n   */\n  contextParser?: ContextParser;\n  /**\n   * An optional GraphQL to SPARQL converter.\n   * Provide this to override the default converter options.\n   */\n  graphqlToSparqlConverter?: GraphQlToSparqlConverter;\n  /**\n   * An optional SPARQL-JSON to GraphQL tree converter.\n   * Provide this to override the default converter options.\n   */\n  sparqlJsonToTreeConverter?: SparqlJsonToTreeConverter;\n}\n\nexport type QueryArgs = IQueryArgsRaw | IQueryArgsSparql;\n\nexport interface IQueryArgsRaw {\n  query: string | DocumentNode;\n  variables?: { [key: string]: any };\n  queryEngineOptions?: any;\n}\n\nexport interface IQueryArgsSparql extends IGraphQlToSparqlResult {\n  queryEngineOptions?: any;\n}\n\nexport interface IGraphQlToSparqlResult {\n  sparqlAlgebra: Algebra.Operation;\n  singularizeVariables: ISingularizeVariables;\n}\n"]}